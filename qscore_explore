'''
This function processes the output of samtools mpileup by splitting each line into a list with elements:
0. chromosome
1. position (a single nucleotide)
2. reference base at position
3. # of reads at position
4. "read bases": a string of characters describing the alignment at the position. Different notation
for matches, mismatches, indels, strand, mapping quality, and starts and ends of reads, not necessarily 1 char/read.
5. Base qualities, encoded as ASCII characters (1/ position).
6. Alignment mapping qualities, encoded as ASCII characters.

It accesses the 5th element to retrieve four mystical stones necessary to defend Earth from certain disaster -
sorry no, it iterates through the string in [5] to convert ASCII base qualities into comma-separated numeric values.
'''

def get_all_quals(file1, file2):
    with open(file1, 'r') as in_pileup, open(file2, 'w') as out_pileup:

        for line in in_pileup:
            line = line.rstrip("\n") # pull that special character off the end
            pileup_data=line.split("\t") # split the string up by tabs, obviously
            base_qual_holder = "" # we're going to hold all the numeric quality values in this string
            align_qual_holder = "" # we're going to hold all the numeric quality values in this string

            for value in pileup_data[5]:
                base_qual_holder += str(ord(value)-33) + ","
            
            for value in pileup_data[6]:
                align_qual_holder += str(ord(value)-33) + ","

            base_qual_holder = base_qual_holder.rstrip(",") # remove the final comma from the string of quality values
            align_qual_holder = align_qual_holder.rstrip(",") # remove the final comma from the string of quality values
            
            out_pileup.write("\t".join(pileup_data[0:4]) + "\t" + base_qual_holder + "\t" + align_qual_holder + "\n") # print all the previous elements and the new value
